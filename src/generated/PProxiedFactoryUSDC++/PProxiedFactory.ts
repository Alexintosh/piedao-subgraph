// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SmartPoolCreated extends ethereum.Event {
  get params(): SmartPoolCreated__Params {
    return new SmartPoolCreated__Params(this);
  }
}

export class SmartPoolCreated__Params {
  _event: SmartPoolCreated;

  constructor(event: SmartPoolCreated) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PProxiedFactory extends ethereum.SmartContract {
  static bind(address: Address): PProxiedFactory {
    return new PProxiedFactory("PProxiedFactory", address);
  }

  balancerFactory(): Address {
    let result = super.call(
      "balancerFactory",
      "balancerFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_balancerFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "balancerFactory",
      "balancerFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPool(param0: Address): boolean {
    let result = super.call("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isPool(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPool", "isPool(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newProxiedSmartPool(
    _name: string,
    _symbol: string,
    _initialSupply: BigInt,
    _tokens: Array<Address>,
    _amounts: Array<BigInt>,
    _weights: Array<BigInt>,
    _cap: BigInt
  ): Address {
    let result = super.call(
      "newProxiedSmartPool",
      "newProxiedSmartPool(string,string,uint256,address[],uint256[],uint256[],uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_initialSupply),
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigIntArray(_weights),
        ethereum.Value.fromUnsignedBigInt(_cap)
      ]
    );

    return result[0].toAddress();
  }

  try_newProxiedSmartPool(
    _name: string,
    _symbol: string,
    _initialSupply: BigInt,
    _tokens: Array<Address>,
    _amounts: Array<BigInt>,
    _weights: Array<BigInt>,
    _cap: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newProxiedSmartPool",
      "newProxiedSmartPool(string,string,uint256,address[],uint256[],uint256[],uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_initialSupply),
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigIntArray(_weights),
        ethereum.Value.fromUnsignedBigInt(_cap)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smartPoolImplementation(): Address {
    let result = super.call(
      "smartPoolImplementation",
      "smartPoolImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_smartPoolImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "smartPoolImplementation",
      "smartPoolImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _balancerFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class NewProxiedSmartPoolCall extends ethereum.Call {
  get inputs(): NewProxiedSmartPoolCall__Inputs {
    return new NewProxiedSmartPoolCall__Inputs(this);
  }

  get outputs(): NewProxiedSmartPoolCall__Outputs {
    return new NewProxiedSmartPoolCall__Outputs(this);
  }
}

export class NewProxiedSmartPoolCall__Inputs {
  _call: NewProxiedSmartPoolCall;

  constructor(call: NewProxiedSmartPoolCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _initialSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _weights(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _cap(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class NewProxiedSmartPoolCall__Outputs {
  _call: NewProxiedSmartPoolCall;

  constructor(call: NewProxiedSmartPoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetImplementationCall extends ethereum.Call {
  get inputs(): SetImplementationCall__Inputs {
    return new SetImplementationCall__Inputs(this);
  }

  get outputs(): SetImplementationCall__Outputs {
    return new SetImplementationCall__Outputs(this);
  }
}

export class SetImplementationCall__Inputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }

  get _implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetImplementationCall__Outputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
